//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.2.
//


package com.opentaxi.android;

import java.io.Serializable;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.app.Fragment;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import com.opentaxi.android.R.id;
import com.opentaxi.android.R.layout;
import com.opentaxi.models.NewCUsers;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class NewClientActivity_
    extends NewClientActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String NEW_C_USERS_EXTRA = "newCUsers";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.new_client);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectExtras_();
        requestWindowFeature(1);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static NewClientActivity_.IntentBuilder_ intent(Context context) {
        return new NewClientActivity_.IntentBuilder_(context);
    }

    public static NewClientActivity_.IntentBuilder_ intent(Fragment supportFragment) {
        return new NewClientActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        userName = ((EditText) hasViews.findViewById(id.userNameField));
        lastName = ((EditText) hasViews.findViewById(id.lastName));
        pass2 = ((EditText) hasViews.findViewById(id.password2Field));
        phoneNumber = ((EditText) hasViews.findViewById(id.phoneNumber));
        cityName = ((AutoCompleteTextView) hasViews.findViewById(id.cityName));
        email = ((EditText) hasViews.findViewById(id.emailField));
        pass = ((EditText) hasViews.findViewById(id.passwordField));
        iAgreeCheckBox = ((CheckBox) hasViews.findViewById(id.iAgreeCheckBox));
        passwordHint = ((EditText) hasViews.findViewById(id.passwordHint));
        sendButton = ((Button) hasViews.findViewById(id.sendButton));
        nameField = ((EditText) hasViews.findViewById(id.nameField));
        middleName = ((EditText) hasViews.findViewById(id.middleName));
        if (sendButton!= null) {
            sendButton.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    NewClientActivity_.this.sendButton();
                }

            }
            );
        }
        {
            View view = hasViews.findViewById(id.userAgreement);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        NewClientActivity_.this.userAgreement();
                    }

                }
                );
            }
        }
        if (email!= null) {
            email.setOnFocusChangeListener(new OnFocusChangeListener() {


                @Override
                public void onFocusChange(View view, boolean hasFocus) {
                    NewClientActivity_.this.focusChangedOnEmailField(view, hasFocus);
                }

            }
            );
        }
        if (userName!= null) {
            userName.setOnFocusChangeListener(new OnFocusChangeListener() {


                @Override
                public void onFocusChange(View view, boolean hasFocus) {
                    NewClientActivity_.this.focusChangedOnUserNameField(view, hasFocus);
                }

            }
            );
        }
        afterLoad();
    }

    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(NEW_C_USERS_EXTRA)) {
                newCUsers = ((NewCUsers) extras_.getSerializable(NEW_C_USERS_EXTRA));
            }
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @Override
    public void setEmailError(final String error) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                NewClientActivity_.super.setEmailError(error);
            }

        }
        );
    }

    @Override
    public void finishThis() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                NewClientActivity_.super.finishThis();
            }

        }
        );
    }

    @Override
    public void setUserError(final String error) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                NewClientActivity_.super.setUserError(error);
            }

        }
        );
    }

    @Override
    public void ActivationDialog() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                NewClientActivity_.super.ActivationDialog();
            }

        }
        );
    }

    @Override
    public void checkUsername(final String username) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    NewClientActivity_.super.checkUsername(username);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void createNewUser(final NewCUsers users) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    NewClientActivity_.super.createNewUser(users);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void checkEmail(final String emailCheck) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    NewClientActivity_.super.checkEmail(emailCheck);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<NewClientActivity_.IntentBuilder_>
    {

        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, NewClientActivity_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            super(fragment.getActivity(), NewClientActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                super.startForResult(requestCode);
            }
        }

        public NewClientActivity_.IntentBuilder_ newCUsers(NewCUsers newCUsers) {
            return super.extra(NEW_C_USERS_EXTRA, ((Serializable) newCUsers));
        }

    }

}
